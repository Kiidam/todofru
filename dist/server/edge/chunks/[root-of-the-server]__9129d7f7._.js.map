{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/TodoFru4/todofru/src/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { NextRequest } from 'next/server';\nimport { getToken } from 'next-auth/jwt';\n\n// Rutas que no requieren autenticación\nconst publicRoutes = [\n  '/login',\n  '/api/auth',\n];\n\n// Rutas que requieren roles específicos\nconst roleProtectedRoutes = {\n  '/admin': ['ADMIN'],\n  '/inventarios': ['ADMIN', 'INVENTORY_MANAGER'],\n  '/facturacion': ['ADMIN', 'SALES_MANAGER'],\n};\n\nexport async function middleware(request: NextRequest) {\n  const { pathname } = request.nextUrl;\n  \n  // Verificar si es una ruta pública\n  if (publicRoutes.some(route => pathname.startsWith(route))) {\n    return NextResponse.next();\n  }\n  \n  // Verificar si es un archivo estático o API (excepto auth)\n  if (\n    pathname.startsWith('/_next') ||\n    pathname.startsWith('/static') ||\n    pathname.startsWith('/api') ||\n    pathname.includes('.') // Archivos estáticos como .jpg, .css, etc.\n  ) {\n    return NextResponse.next();\n  }\n  \n  // Obtener el token de sesión\n  const token = await getToken({\n    req: request,\n    secret: process.env.NEXTAUTH_SECRET,\n  });\n  \n  // Si no hay token, redirigir al login\n  if (!token) {\n    const url = new URL('/login', request.url);\n    url.searchParams.set('callbackUrl', encodeURI(request.url));\n    return NextResponse.redirect(url);\n  }\n  \n  // Verificar permisos basados en roles para rutas protegidas\n  for (const [route, roles] of Object.entries(roleProtectedRoutes)) {\n    if (pathname.startsWith(route) && !roles.includes(token.role as string)) {\n      // Si el usuario no tiene el rol requerido, redirigir al dashboard\n      return NextResponse.redirect(new URL('/dashboard', request.url));\n    }\n  }\n  \n  return NextResponse.next();\n}\n\n// Configurar en qué rutas se ejecutará el middleware\nexport const config = {\n  matcher: [\n    /*\n     * Coincide con todas las rutas excepto:\n     * 1. /api/auth (NextAuth.js endpoints)\n     * 2. /_next (Next.js internals)\n     * 3. /static (archivos estáticos)\n     * 4. Todos los archivos estáticos en la carpeta public\n     */\n    '/((?!api/auth|_next|static|.*\\..*|favicon.ico).*)',\n  ],\n};"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAEA;;;AAEA,uCAAuC;AACvC,MAAM,eAAe;IACnB;IACA;CACD;AAED,wCAAwC;AACxC,MAAM,sBAAsB;IAC1B,UAAU;QAAC;KAAQ;IACnB,gBAAgB;QAAC;QAAS;KAAoB;IAC9C,gBAAgB;QAAC;QAAS;KAAgB;AAC5C;AAEO,eAAe,WAAW,OAAoB;IACnD,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IAEpC,mCAAmC;IACnC,IAAI,aAAa,IAAI,CAAC,CAAA,QAAS,SAAS,UAAU,CAAC,SAAS;QAC1D,OAAO,uNAAY,CAAC,IAAI;IAC1B;IAEA,2DAA2D;IAC3D,IACE,SAAS,UAAU,CAAC,aACpB,SAAS,UAAU,CAAC,cACpB,SAAS,UAAU,CAAC,WACpB,SAAS,QAAQ,CAAC,KAAK,2CAA2C;MAClE;QACA,OAAO,uNAAY,CAAC,IAAI;IAC1B;IAEA,6BAA6B;IAC7B,MAAM,QAAQ,MAAM,IAAA,uLAAQ,EAAC;QAC3B,KAAK;QACL,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACrC;IAEA,sCAAsC;IACtC,IAAI,CAAC,OAAO;QACV,MAAM,MAAM,IAAI,IAAI,UAAU,QAAQ,GAAG;QACzC,IAAI,YAAY,CAAC,GAAG,CAAC,eAAe,UAAU,QAAQ,GAAG;QACzD,OAAO,uNAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,4DAA4D;IAC5D,KAAK,MAAM,CAAC,OAAO,MAAM,IAAI,OAAO,OAAO,CAAC,qBAAsB;QAChE,IAAI,SAAS,UAAU,CAAC,UAAU,CAAC,MAAM,QAAQ,CAAC,MAAM,IAAI,GAAa;YACvE,kEAAkE;YAClE,OAAO,uNAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,QAAQ,GAAG;QAChE;IACF;IAEA,OAAO,uNAAY,CAAC,IAAI;AAC1B;AAGO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;KAMC,GACD;KACD;AACH"}}]
}