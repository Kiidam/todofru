generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Categoria {
  id          String   @id
  nombre      String   @unique(map: "nombre") @db.VarChar(255)
  descripcion String?  @db.Text
  activo      Boolean  @default(true)
  createdAt   DateTime @default(now()) @db.DateTime(0)
  updatedAt   DateTime @default(now()) @db.DateTime(0)
  productos   Producto[]

  @@map("categoria")
}

model Cliente {
  id                    String              @id
  nombre                String              @db.VarChar(255)
  ruc                   String?             @unique(map: "ruc") @db.VarChar(11)
  telefono              String?             @db.VarChar(50)
  email                 String?
  direccion             String?             @db.VarChar(255)
  contacto              String?             @db.VarChar(255)
  tipoCliente           cliente_tipoCliente @default(MINORISTA)
  activo                Boolean             @default(true)
  createdAt             DateTime            @default(now()) @db.DateTime(0)
  updatedAt             DateTime            @default(now()) @db.DateTime(0)
  
  // Nuevos campos para estructura refactorizada
  tipoEntidad           String?             @db.VarChar(20) // 'PERSONA_NATURAL' | 'PERSONA_JURIDICA'
  numeroIdentificacion  String?             @unique(map: "numeroIdentificacion") @db.VarChar(11) // DNI (8) o RUC (11)
  nombres               String?             @db.VarChar(100) // Para personas naturales
  apellidos             String?             @db.VarChar(100) // Para personas naturales
  razonSocial           String?             @db.VarChar(200) // Para personas jurídicas
  mensajePersonalizado  String?             @db.Text // Mensaje personalizado para correos
  
  pedidos               PedidoVenta[]

  @@map("cliente")
}

model MovimientoInventario {
  productoId       String
  tipo             movimientoinventario_tipo
  cantidad         Float
  cantidadAnterior Float
  cantidadNueva    Float
  precio           Float?
  motivo           String?   @db.VarChar(255)
  numeroGuia       String?
  pedidoCompraId   String?
  pedidoVentaId    String?
  usuarioId        String
  createdAt        DateTime  @default(now()) @db.DateTime(0)

  pedidoCompra     PedidoCompra? @relation(fields: [pedidoCompraId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_mi_pc")
  producto         Producto      @relation(fields: [productoId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_mi_producto")
  pedidoVenta      PedidoVenta?  @relation(fields: [pedidoVentaId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_mi_pv")
  usuario          User          @relation(fields: [usuarioId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_mi_usuario")

  @@index([pedidoCompraId], map: "fk_mi_pc")
  @@index([pedidoVentaId], map: "fk_mi_pv")
  @@index([usuarioId], map: "fk_mi_usuario")
  @@index([createdAt], map: "idx_mi_created")
  @@index([productoId], map: "idx_mi_producto")
  @@index([tipo], map: "idx_mi_tipo")
  @@id([productoId, createdAt])
  @@map("movimientoinventario")
}

model PedidoCompra {
  id             String   @id
  numero         String   @unique(map: "numero")
  proveedorId    String
  fecha          DateTime @default(now()) @db.DateTime(0)
  fechaEntrega   DateTime? @db.DateTime(0)
  subtotal       Float    @default(0)
  impuestos      Float    @default(0)
  total          Float    @default(0)
  observaciones  String?  @db.Text
  numeroGuia     String?
  archivoGuia    String?
  usuarioId      String
  createdAt      DateTime @default(now()) @db.DateTime(0)
  updatedAt      DateTime @default(now()) @db.DateTime(0)
  proveedor      Proveedor @relation(fields: [proveedorId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pc_proveedor")
  usuario        User      @relation(fields: [usuarioId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pc_usuario")
  items          PedidoCompraItem[]
  movimientos    MovimientoInventario[]

  @@index([usuarioId], map: "fk_pc_usuario")
  @@index([fecha], map: "idx_pc_fecha")
  @@index([proveedorId], map: "idx_pc_proveedor")
  @@map("pedidocompra")
}

model PedidoCompraItem {
  id         String  @id
  pedidoId   String
  productoId String
  cantidad   Float
  precio     Float
  subtotal   Float
  pedido     PedidoCompra @relation(fields: [pedidoId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pci_pedido")
  producto   Producto     @relation(fields: [productoId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pci_producto")

  @@unique([pedidoId, productoId], map: "uq_pci_pedido_producto")
  @@index([pedidoId], map: "idx_pci_pedido")
  @@index([productoId], map: "idx_pci_producto")
  @@map("pedidocompraitem")
}

model PedidoVenta {
  id            String             @id
  numero        String             @unique(map: "numero")
  clienteId     String
  fecha         DateTime           @default(now()) @db.DateTime(0)
  subtotal      Float              @default(0)
  impuestos     Float              @default(0)
  total         Float              @default(0)
  estado        pedidoventa_estado @default(PENDIENTE)
  observaciones String?            @db.Text
  numeroGuia    String?
  archivoGuia   String?
  usuarioId     String
  createdAt     DateTime           @default(now()) @db.DateTime(0)
  updatedAt     DateTime           @default(now()) @db.DateTime(0)
  cliente       Cliente            @relation(fields: [clienteId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pv_cliente")
  usuario       User               @relation(fields: [usuarioId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pv_usuario")
  items         PedidoVentaItem[]
  movimientos   MovimientoInventario[]

  @@index([usuarioId], map: "fk_pv_usuario")
  @@index([clienteId], map: "idx_pv_cliente")
  @@index([fecha], map: "idx_pv_fecha")
  @@map("pedidoventa")
}

model PedidoVentaItem {
  id         String  @id
  pedidoId   String
  productoId String
  cantidad   Float
  precio     Float
  subtotal   Float
  pedido     PedidoVenta @relation(fields: [pedidoId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pvi_pedido")
  producto   Producto    @relation(fields: [productoId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pvi_producto")

  @@unique([pedidoId, productoId], map: "uq_pvi_pedido_producto")
  @@index([pedidoId], map: "idx_pvi_pedido")
  @@index([productoId], map: "idx_pvi_producto")
  @@map("pedidoventaitem")
}

model Producto {
  id              String   @id
  nombre          String   @db.VarChar(255)
  sku             String?  @unique(map: "sku")
  descripcion     String?  @db.Text
  categoriaId     String?
  unidadMedidaId  String
  precio          Float    @default(0)
  porcentajeMerma Float    @default(0)
  stock           Float    @default(0)
  stockMinimo     Float    @default(0)
  perecedero      Boolean  @default(true)
  diasVencimiento Int?
  tieneIGV        Boolean  @default(true)
  activo          Boolean  @default(true)
  createdAt       DateTime @default(now()) @db.DateTime(0)
  updatedAt       DateTime @default(now()) @db.DateTime(0)
  categoria       Categoria?   @relation(fields: [categoriaId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_prod_categoria")
  unidadMedida    UnidadMedida @relation(fields: [unidadMedidaId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_prod_unidad")
  comprasItems    PedidoCompraItem[]
  ventasItems     PedidoVentaItem[]
  movimientos     MovimientoInventario[]

  @@index([categoriaId], map: "fk_prod_categoria")
  @@index([unidadMedidaId], map: "fk_prod_unidad")
  @@index([activo], map: "idx_prod_activo")
  @@index([nombre], map: "idx_prod_nombre")
  @@map("producto")
}

enum TipoEntidad {
  PERSONA_NATURAL
  PERSONA_JURIDICA
}

model Proveedor {
  id                 String         @id
  tipoEntidad        TipoEntidad    @default(PERSONA_NATURAL)
  nombre             String         @db.VarChar(255)
  numeroIdentificacion String?      @unique(map: "numero_identificacion") @db.VarChar(11)
  telefono           String?        @db.VarChar(50)
  email              String?
  direccion          String?        @db.VarChar(255)
  contacto           String?        @db.VarChar(255)
  
  // Campos específicos para persona natural
  nombres            String?        @db.VarChar(100)
  apellidos          String?        @db.VarChar(100)
  
  // Campos específicos para persona jurídica
  razonSocial        String?        @db.VarChar(255)
  representanteLegal String?        @db.VarChar(255)
  
  // Campos de compatibilidad (deprecated)
  ruc                String?        @db.VarChar(11)
  dni                String?        @db.VarChar(8)
  
  activo             Boolean        @default(true)
  createdAt          DateTime       @default(now()) @db.DateTime(0)
  updatedAt          DateTime       @default(now()) @db.DateTime(0)
  pedidosCompra      PedidoCompra[]
  
  @@index([tipoEntidad], map: "idx_proveedor_tipo")
  @@index([numeroIdentificacion], map: "idx_proveedor_numero_identificacion")
  @@map("proveedor")
}

model UnidadMedida {
  id        String    @id
  nombre    String    @unique(map: "nombre") @db.VarChar(255)
  simbolo   String    @unique(map: "simbolo") @db.VarChar(50)
  activo    Boolean   @default(true)
  createdAt DateTime  @default(now()) @db.DateTime(0)
  updatedAt DateTime  @default(now()) @db.DateTime(0)
  productos Producto[]

  @@map("unidadmedida")
}

model User {
  id        String   @id
  name      String   @db.VarChar(255)
  email     String   @unique(map: "email")
  password  String?
  role      user_role @default(ADMIN)
  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @default(now()) @db.DateTime(0)
  compras   PedidoCompra[]
  ventas    PedidoVenta[]
  registros MovimientoInventario[]

  @@map("user")
}

enum movimientoinventario_tipo {
  ENTRADA
  SALIDA
  AJUSTE
}

enum user_role {
  USER
  ADMIN
}

enum cliente_tipoCliente {
  MAYORISTA
  MINORISTA
}

enum pedidoventa_estado {
  PENDIENTE
  CONFIRMADO
  EN_PROCESO
  COMPLETADO
  ANULADO
}
